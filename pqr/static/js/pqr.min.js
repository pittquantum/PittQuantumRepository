!function o(i,r,s){function a(e,t){if(!r[e]){if(!i[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(l)return l(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}n=r[e]={exports:{}},i[e][0].call(n.exports,function(t){return a(i[e][1][t]||t)},n,n.exports,o,i,r,s)}return r[e].exports}for(var l="function"==typeof require&&require,t=0;t<s.length;t++)a(s[t]);return a}({1:[function(t,e,n){"use strict";e.exports={fontSizeChangerIndex:2,defaultFontSize:16,fontSizeChanger:function(t,e){return-1===t?this.changeFontSize(parseInt(e)-this.fontSizeChangerIndex):0===t?this.changeFontSize(this.defaultFontSize):1===t?this.changeFontSize(parseInt(e)+this.fontSizeChangerIndex):void 0},changeFontSize:function(t){return $("body").css("font-size",t.toString()+"px"),t}}},{}],2:[function(t,e,n){"use strict";e.exports=function(){t("./util");return{debug:!0,inputSelector:"#search-bar-auto",resultsSelector:".autocomplete-results",resultsSizeMax:10,database:[]}}()},{"./util":10}],3:[function(t,e,n){"use strict";var o,i,r,s,a;e.exports=(t("browsernizr/test/webgl"),t("browsernizr/test/storage/localstorage"),o=t("./util"),i=t("./threeDMole"),r=t("browsernizr"),s=t("./molecule"),a=t("./autocomplete"),{bindFontSwitchers:function(){$("#increasefont").on("click vclick",function(t){t.preventDefault(),o.updateFont(1)}),$("#reducefont").on("click vclick",function(t){t.preventDefault(),o.updateFont(-1)}),$("#defaultfont").on("click vclick",function(t){t.preventDefault(),o.updateFont(0)})},moleculeReset:function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),i.resetView(),o.bootstrapFeedback("Molecule viewer reset","feedback","fa-crosshairs")})},moleculeToggleRotation:function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),i.toggleRotation();t=$(this).children();t.hasClass("fa-toggle-on")?(t.removeClass("fa-toggle-on"),t.addClass("fa-toggle-off"),o.bootstrapFeedback("Rotation deactivated","fa-refresh")):(t.removeClass("fa-toggle-off"),t.addClass("fa-toggle-on"),o.bootstrapFeedback("Rotation activated","fa-refresh"))})},propertiesViewerHandler:function(){$("#simpleView").on("click vclick",function(t){t.preventDefault(),$("#molecule-details table .detailed").fadeOut("fast"),r.localstorage&&(localStorage.setItem("moleculeLayout","simple"),localStorage.setItem("moleculeLayout","simple")),o.bootstrapFeedback("Switched to simple view","feedback","fa-desktop")}),$("#detailedView").on("click vclick",function(t){t.preventDefault(),$("#molecule-details table .detailed").removeClass("hidden"),$("#molecule-details table .detailed").fadeIn("fast"),r.localstorage&&localStorage.setItem("moleculeLayout","detailed"),o.bootstrapFeedback("Switched to detailed view ","feedback","fa-desktop")})},moleculeStyleChanger:function(){$(".changeStyleSphere").length&&$(".changeStyleSphere").on("click vclick",function(t){t.preventDefault(),i.changeStyle("sphere"),o.bootstrapFeedback("Switched to sphere display ","feedback","fa-desktop")}),$(".changeStyleLine").length&&$(".changeStyleLine").on("click vclick",function(t){t.preventDefault(),i.changeStyle("line"),o.bootstrapFeedback("Switched to line display ","feedback","fa-desktop")}),$(".changeStyleCross").length&&$(".changeStyleCross").on("click vclick",function(t){t.preventDefault(),i.changeStyle("cross"),o.bootstrapFeedback("Switched to cross display ","feedback","fa-desktop")}),$(".changeStyleStick").length&&$(".changeStyleStick").on("click vclick",function(t){t.preventDefault(),i.changeStyle("stick"),r.localstorage&&localStorage.setItem("moleculeViewerlayout","sticks"),o.bootstrapFeedback("Switched to stick display ","feedback","fa-desktop")})},moleculeToggleSurface:function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),"Remove Surface"===$(this).text()?(i.toggleSurface(),$(this).addClass("btn-success"),$(this).removeClass("btn-danger"),$(this).html("Add Surface")):(i.toggleSurface2(),$(this).addClass("btn-danger"),$(this).removeClass("btn-success"),$(this).html("Remove Surface"))})},printButton:function(t){$(t).length&&$(t).on("click vclick",function(t){t.preventDefault(),window.print(),o.bootstrapFeedback("Printing molecule data","feedback","fa-print")})},ajaxLoadButton:function(){$("#molecule-ajax-loader").on("click",function(){s.ajaxSearch()})},ajaxTimer:function(){s.ajaxSearch();var t=setInterval(function(){!s.requestToLoad()||s.ajaxSearch()||clearInterval(t)},1e3)},checkAutocomplete:function(t){$(t).on("keyup",function(){var t=$.trim($(this).val());setTimeout(function(){a.findMatches(t),setTimeout(function(){a.findMatches(t)},250)},50)})}})},{"./autocomplete":2,"./molecule":5,"./threeDMole":9,"./util":10,browsernizr:24,"browsernizr/test/storage/localstorage":53,"browsernizr/test/webgl":54}],4:[function(t,e,n){"use strict";t("./polyfill"),t("browsernizr/test/webgl"),t("browsernizr/test/storage/localstorage"),t("browsernizr/test/css/animations");var o=t("browsernizr"),i=t("./bindevents"),r=(t("./autocomplete"),t("./qrgen")),s=t("./scrollload"),a=t("./molecule"),l=t("./util"),c=t("./threeDMole");$(document).ready(function(){o.localstorage&&o.webgl?(l.FullToolTipOptIn(),l.initFontSize(),i.bindFontSwitchers(),$("#main").hasClass("page-home")?(c.initViewers(),l.updatePropertiesViewer(),l.initQuickFit("#molecule-name",{min:12,max:36}),i.propertiesViewerHandler(),i.moleculeStyleChanger(),i.moleculeReset("#reset-molecule"),i.moleculeToggleRotation("#rotationSwitch"),i.moleculeToggleSurface(".surfaceSwitch"),i.printButton("#print-molecule")):$("#main").hasClass("page-molecule")?(c.initViewers(),l.updatePropertiesViewer(),l.initQuickFit("#molecule-name",{min:12,max:36}),i.propertiesViewerHandler(),i.moleculeStyleChanger(),i.moleculeReset("#reset-molecule"),i.moleculeToggleRotation("#rotationSwitch"),i.moleculeToggleSurface(".surfaceSwitch"),i.printButton("#print-molecule"),r.addQRCodeMolecule(l.getQRURL()),r.addQRCodePrint(l.getQRURL())):$("#main").hasClass("page-browse")&&"true"===$("#molecule-browser").attr("data-has-results")&&(s.init(),a.initAjaxSearch(),$(".molecule-results-masonary").removeClass("translucent"),i.ajaxTimer(),i.ajaxLoadButton())):l.redirectNoWebGL()})},{"./autocomplete":2,"./bindevents":3,"./molecule":5,"./polyfill":6,"./qrgen":7,"./scrollload":8,"./threeDMole":9,"./util":10,browsernizr:24,"browsernizr/test/css/animations":52,"browsernizr/test/storage/localstorage":53,"browsernizr/test/webgl":54}],5:[function(t,e,n){"use strict";var o,i;e.exports=(o=t("./scrollload"),i={debug:!1,nextPageNum:2,maxPageNum:-1,maxNumResults:-1,resultsVisible:100,activeRequests:0,maxActiveRequests:5,results:[],maxLoadedResults:5,query:null,scrollLimit:5e3,totalRequests:0,initAjaxSearch:function(){-1===this.maxPageNum&&(this.maxPageNum=parseInt($(".meta-data").attr("data-max-pages"))),-1===this.maxNumResults&&(this.maxNumResults=parseInt($(".meta-data").attr("data-total-results"))),$("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)},ajaxSearch:function(){var t;return this.resultsVisible<this.maxNumResults?(t=this.getQuery(),this.activeRequests++,this.totalRequests++,$("#molecule-ajax-loader").hide(300),$(".pagination .cogs").show(300),$.ajax({method:"GET",url:"/browse/"+this.nextPageNum+"/",data:t}).done(function(t){i.results.push(t),i.activeRequests--,i.resultsVisible+=100,0===i.activeRequests&&($("#molecule-ajax-loader").show(300),$(".pagination .cogs").hide(300)),i.showResults(1)}).fail(function(){return console.log("Search Results Failed"),!1}),this.nextPageNum++,!0):($("#molecule-ajax-loader").addClass("disabled").html("No More Results!"),$(".pagination .cogs").hide(),!1)},showResults:function(t){0<this.results.length&&$.each(this.results.splice(0,t),function(t,e){$("#grid").append(e),o.init()})},getQuery:function(){var t;return null===this.query&&(t=$("#molecule-browser"),this.query={ajax:!0,query:t.attr("data-query"),type:t.attr("data-type")}),this.query},requestToLoad:function(){return!($("body").height()-$(window).scrollTop()>this.scrollLimit||this.activeRequests>this.maxActiveRequests||this.results.length>this.maxLoadedResults)},determineSearchType:function(){}})},{"./scrollload":8}],6:[function(t,e,n){"use strict";var o;e.exports=(e={},String.prototype.trim||(o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,String.prototype.trim=function(){return this.replace(o,"")}),e)},{}],7:[function(t,e,n){"use strict";function o(t,e,n){var o,i=document.getElementById(t);i?((o=r.qrcode(e,"M")).addData(n),o.make(),n=o.createImgTag(e),i.innerHTML=n):console.log("Couldn't find the id: "+t)}var r;e.exports=(r=t("qrcode-npm"),(e={}).addQRCodeMolecule=function(t){o("qrcode",2,t)},e.addQRCodePrint=function(t){o("qr-print-wrapper",2,t)},e)},{"qrcode-npm":55}],8:[function(t,e,n){"use strict";function r(){var t=i.clientHeight,e=window.innerHeight;return t<e?e:t}function s(){return window.pageYOffset||i.scrollTop}function a(t,e){var n=t.offsetHeight,o=s(),i=o+r(),t=function(t){for(var e=0,n=0;isNaN(t.offsetTop)||(e+=t.offsetTop),isNaN(t.offsetLeft)||(n+=t.offsetLeft),t=t.offsetParent;);return{top:e,left:n}}(t).top;return t+n*(e=e||0)<=i&&o<=t+n-n*e}function o(t,e){this.el=t,this.options=function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.defaults,e),this._init()}var i;e.exports=(t("browsernizr"),i=window.document.documentElement,o.prototype={defaults:{minDuration:0,maxDuration:0,viewportFactor:0},_init:function(){this.items=Array.prototype.slice.call(document.querySelectorAll("#"+this.el.id+" > li")),this.itemsCount=this.items.length,this.itemsRenderedCount=0,this.didScroll=!1;var n=this;n.items.forEach(function(t,e){a(t)&&(n._checkTotalRendered(),t.className+=" shown")}),window.addEventListener("scroll",function(){n._onScrollFn()},!1),window.addEventListener("resize",function(){n._resizeHandler()},!1)},_onScrollFn:function(){var t=this;this.didScroll||(this.didScroll=!0,setTimeout(function(){t._scrollPage()},60))},_scrollPage:function(){var i=this;this.items.forEach(function(e,t){var n=-1<(" "+e.className+" ").indexOf(" shown "),o=-1<(" "+e.className+" ").indexOf(" animate ");n||o||!a(e,i.options.viewportFactor)||setTimeout(function(){var t=s()+r()/2;i.el.style.WebkitPerspectiveOrigin="50% "+t+"px",i.el.style.MozPerspectiveOrigin="50% "+t+"px",i.el.style.perspectiveOrigin="50% "+t+"px",i._checkTotalRendered(),i.options.minDuration&&i.options.maxDuration&&(t=Math.random()*(i.options.maxDuration-i.options.minDuration)+i.options.minDuration+"s",e.style.WebkitAnimationDuration=t,e.style.MozAnimationDuration=t,e.style.animationDuration=t),e.className+=" animate"},25)}),this.didScroll=!1},_resizeHandler:function(){var t=this;this.resizeTimeout&&clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(function(){t._scrollPage(),t.resizeTimeout=null},1e3)},_checkTotalRendered:function(){++this.itemsRenderedCount,this.itemsRenderedCount===this.itemsCount&&window.removeEventListener("scroll",this._onScrollFn)}},{init:function(){new o(document.getElementById("grid"),{minDuration:.4,maxDuration:.7,viewportFactor:.2})}})},{browsernizr:24}],9:[function(t,e,n){"use strict";var i;e.exports=i={allViewers:[],rotationTimers:[],dataType:"mol2",defaultStyle:"stick",backgroundColor:16777215,backgroundOpacity:1,rotationTime:9,rotationXDegree:1,rotationYDegree:1,showSurface:!0,initViewers:function(){$3Dmol.syncSurface=!1,i.allViewers=$3Dmol.viewers,$.each(i.allViewers,function(t,e){i.clearBackgrounds(e),e.setViewStyle({style:"outline",color:"black",width:.03}),e.render()})},clearBackgrounds:function(t){t.setBackgroundColor(i.backgroundColor,0),t.resize(),t.render()},rotate:function(t){var e=window.setInterval(function(){t.rotate(i.rotationYDegree,"y"),t.rotate(i.rotationXDegree,"x"),t.render()},i.rotationTime,t);i.rotationTimers.push(e)},toggleRotation:function(){var t=i.rotationTimers.pop();void 0!==t?clearInterval(t):i.rotate(i.allViewers[0])},setSurfaceColor:function(t){},toggleSurface:function(t){t=void 0!==t?t:i.allViewers[0],i.removeSurface(t)},removeSurface:function(t){t.removeAllSurfaces(),t.render()},toggleSurface2:function(t){t=void 0!==t?t:i.allViewers[0],i.addSurface(t)},addSurface:function(t){t.addSurface($3Dmol.SurfaceType.MS,{color:"white",opacity:.8}),t.render()},resetView:function(){i.allViewers[0].zoomTo()},addArrow:function(t,e,n,o){i.allViewers[0].addArrow({end:new $3Dmol.Vector3(e,n,o),color:"black",wireframe:!1}),i.allViewers[0].render()},changeStyle:function(t){var e=i.allViewers[0];e&&("sphere"===t?e.setStyle({},{sphere:{}}):"stick"===t?e.setStyle({},{stick:{}}):"cross"===t?e.setStyle({},{cross:{}}):"line"===t?e.setStyle({},{line:{}}):"ballstick"===t&&e.setStyle({},{stick:{radius:.15},sphere:{radius:.4}}),e.render())}}},{}],10:[function(t,e,n){"use strict";function o(t){t.target.parentNode.parentNode.className+=" input--filled"}function i(t){var e;""===t.target.value.trim()&&(e=new RegExp("(\\s|^)input--filled(\\s|$)"),t.target.parentNode.parentNode.className=t.target.parentNode.parentNode.className.replace(e," "),t.target.parentNode.className=t.target.parentNode.className.replace(e," "))}var r,s,a;e.exports=(t("bootstrap"),r=t("./accessibility"),s=t("browsernizr"),(a={elementSymbols:["h","he","li","be","b","c","n","o","f","ne","na","mg","al","si","p","s","cl","ar","k","ca","sc","ti","v","cr","mn","fe","co","ni","cu","zn","ga","ge","as","se","br","kr","rb","sr","y","zr","nb","mo","tc","ru","rh","pd","ag","cd","in","sn","sb","te","i","xe","cs","ba","la","ce","pr","nd","pm","sm","eu","gd","tb","dy","ho","er","tm","yb","lu","hf","ta","w","re","os","ir","pt","au","hg","tl","pb","bi","po","at","rn","fr","ra","ac","th","pa","u","np","pu","am","cm","bk","cf","es","fm","md","no","lr","rf","db","sg","bh","hs","mt","ds","rg","cp","uut","uuq","uup","uuh","uus","uuo"]}).getINCHIKey=function(){var t="";return!!$(".molecule-inchikey").length&&(t=$(".molecule-inchikey").children().next().html(),$.trim(t))},a.getQRURL=function(){var t="http://doi.org/",e=null;if($(".molecule-doi-short").length)e=t+$(".molecule-doi-short").text();else if($(".molecule-doi-long").length)e=t+$(".molecule-doi-long").text();else{if(!this.getINCHIKey())return a.getRootURL();e=a.getRootURL(),e+="/mol/"+this.getINCHIKey()}return $.trim(e)},a.initFontSize=function(){r.changeFontSize(a.getCurrentFontSize())},a.updateFont=function(t){var e=null;-1===t?(e=r.fontSizeChanger(-1,a.getCurrentFontSize()),a.bootstrapFeedback("Decrease Font Size to "+e,"fa-font")):0===t?(e=r.changeFontSize(r.defaultFontSize),a.bootstrapFeedback("Reset Font Size to "+e,"fa-font")):1===t&&(e=r.fontSizeChanger(1,a.getCurrentFontSize()),a.bootstrapFeedback("Increased Font Size to "+e,"fa-font")),s.localstorage&&localStorage.setItem("baseFontSize",e)},a.getCurrentFontSize=function(){var t;return s.localstorage?null!==(t=localStorage.getItem("baseFontSize"))?t:(localStorage.setItem("baseFontSize",r.defaultFontSize),r.defaultFontSize):r.defaultFontSize},a.redirectNoWebGL=function(){s.webGL||($("#main").prepend("<div class='alert alert-danger' role='alert'> <strong> <a href='http://get.webgl.org/'>WebGL</a> </strong> is not supported on your device! </div"),window.location.replace("https://get.webgl.org/"))},a.updatePropertiesViewer=function(){s.localstorage&&("detailed"===localStorage.getItem("moleculeLayout")?$("#molecule-details table .detailed").removeClass("hidden"):$("#molecule-details table .detailed").addClass("hidden"))},a.initQuickFit=function(t,e){},a.formStyleHelper=void[].slice.call(document.querySelectorAll(".input-field")).forEach(function(t){""!==t.value.trim()&&(t.parentNode.className+=" input--filled"),t.addEventListener("focus",o),t.addEventListener("blur",i)}),a.isINCHI=function(t){return 27===(t=$.trim(t).toLowerCase()).length&&"-"===t[14]&&"-"===t[25]&&!!t.match(/^([0-9A-Za-z\-]+)$/)},a.isFormula=function(t){var e=(t=$.trim(t).toLowerCase()).match(/\d+/g),t=t.match(/[a-zA-Z]+/g),n=!0;return null===e?null!==t&&($.each(t,function(t,e){if(!a.isSymbol(e))return n=!1}),n):null!==t&&($.each(t,function(t,e){if(!a.isSymbol(e))return n=!1}),n)},a.isSymbol=function(t){return t=$.trim(t).toLowerCase(),-1!==$.inArray(t,this.elementSymbols)},a.feedbackNum=0,a.feedbackTimeout=1500,a.activeFeedbackCloser=!1,a.debug=!0,a.getRootURL=function(){return location.origin||(location.origin=location.protocol+"//"+location.host),location.origin},a.smoothScrollingAnchors=function(){$('a[href^="#"]').on("click",function(t){t.preventDefault();var e=this.hash,t=$(e);$("html, body").stop().animate({scrollTop:t.offset().top},900,"swing",function(){window.location.hash=e})})},a.bootstrapFeedback=function(t,e){var n=document.createElement("div"),o=(n.className="alert alert-success",n.innerHTML='<i class="fa '+e+'"></i> '+t,document.body.getElementsByClassName("top-right")[0]);o.appendChild(n),setTimeout(function(){o.removeChild(n)},a.feedbackTimeout)},a.footerToBottom=function(t,e){$(t).length&&$(e).length&&(this.updateFooterHeight(t,e),setInterval(function(){a.updateFooterHeight(t,e)},200))},a.updateFooterHeight=function(t){var e=$(window).height(),n=$(t).height(),n=$(t).position().top+n;n<e?$(t).css("margin-top",e-n+10+"px"):$(t).css("margin-top","10px")},a.toProperCase=void(String.prototype.toProperCase=function(){return this.replace(/\w\S*/g,function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()})}),a.FullToolTipOptIn=function(){$('[data-toggle="tooltip"]').on("click",function(t){t.preventDefault()}),$(function(){$('[data-toggle="tooltip"]').tooltip()})},a)},{"./accessibility":1,bootstrap:11,browsernizr:24}],11:[function(t,e,n){t("../../js/transition.js"),t("../../js/alert.js"),t("../../js/button.js"),t("../../js/carousel.js"),t("../../js/collapse.js"),t("../../js/dropdown.js"),t("../../js/modal.js"),t("../../js/tooltip.js"),t("../../js/popover.js"),t("../../js/scrollspy.js"),t("../../js/tab.js"),t("../../js/affix.js")},{"../../js/affix.js":12,"../../js/alert.js":13,"../../js/button.js":14,"../../js/carousel.js":15,"../../js/collapse.js":16,"../../js/dropdown.js":17,"../../js/modal.js":18,"../../js/popover.js":19,"../../js/scrollspy.js":20,"../../js/tab.js":21,"../../js/tooltip.js":22,"../../js/transition.js":23}],12:[function(t,e,n){!function(s){"use strict";function a(t,e){this.options=s.extend({},a.DEFAULTS,e),e=this.options.target===a.DEFAULTS.target?s(this.options.target):s(document).find(this.options.target),this.$target=e.on("scroll.bs.affix.data-api",s.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",s.proxy(this.checkPositionWithEventLoop,this)),this.$element=s(t),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()}function n(n){return this.each(function(){var t=s(this),e=t.data("bs.affix");e||t.data("bs.affix",e=new a(this,"object"==typeof n&&n)),"string"==typeof n&&e[n]()})}a.VERSION="3.4.1",a.RESET="affix affix-top affix-bottom",a.DEFAULTS={offset:0,target:window},a.prototype.getState=function(t,e,n,o){var i,r=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();return null!=n&&"top"==this.affixed?r<n&&"top":"bottom"==this.affixed?null!=n?!(r+this.unpin<=s.top)&&"bottom":!(r+a<=t-o)&&"bottom":(s=(i=null==this.affixed)?r:s.top,null!=n&&r<=n?"top":null!=o&&t-o<=s+(i?a:e)&&"bottom")},a.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(a.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},a.prototype.checkPositionWithEventLoop=function(){setTimeout(s.proxy(this.checkPosition,this),1)},a.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=this.$element.height(),e=this.options.offset,n=e.top,o=e.bottom,i=Math.max(s(document).height(),s(document.body).height()),e=("object"!=typeof e&&(o=n=e),"function"==typeof n&&(n=e.top(this.$element)),"function"==typeof o&&(o=e.bottom(this.$element)),this.getState(i,t,n,o));if(this.affixed!=e){null!=this.unpin&&this.$element.css("top","");var n="affix"+(e?"-"+e:""),r=s.Event(n+".bs.affix");if(this.$element.trigger(r),r.isDefaultPrevented())return;this.affixed=e,this.unpin="bottom"==e?this.getPinnedOffset():null,this.$element.removeClass(a.RESET).addClass(n).trigger(n.replace("affix","affixed")+".bs.affix")}"bottom"==e&&this.$element.offset({top:i-t-o})}};var t=s.fn.affix;s.fn.affix=n,s.fn.affix.Constructor=a,s.fn.affix.noConflict=function(){return s.fn.affix=t,this},s(window).on("load",function(){s('[data-spy="affix"]').each(function(){var t=s(this),e=t.data();e.offset=e.offset||{},null!=e.offsetBottom&&(e.offset.bottom=e.offsetBottom),null!=e.offsetTop&&(e.offset.top=e.offsetTop),n.call(t,e)})})}(jQuery)},{}],13:[function(t,e,n){!function(r){"use strict";function s(t){r(t).on("click",e,this.close)}var e='[data-dismiss="alert"]';s.VERSION="3.4.1",s.TRANSITION_DURATION=150,s.prototype.close=function(t){var e=r(this),n=e.attr("data-target"),o=(n="#"===(n=n||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]*$)/,""))?[]:n,r(document).find(n));function i(){o.detach().trigger("closed.bs.alert").remove()}t&&t.preventDefault(),(o=o.length?o:e.closest(".alert")).trigger(t=r.Event("close.bs.alert")),t.isDefaultPrevented()||(o.removeClass("in"),r.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",i).emulateTransitionEnd(s.TRANSITION_DURATION):i())};var t=r.fn.alert;r.fn.alert=function(n){return this.each(function(){var t=r(this),e=t.data("bs.alert");e||t.data("bs.alert",e=new s(this)),"string"==typeof n&&e[n].call(t)})},r.fn.alert.Constructor=s,r.fn.alert.noConflict=function(){return r.fn.alert=t,this},r(document).on("click.bs.alert.data-api",e,s.prototype.close)}(jQuery)},{}],14:[function(t,e,n){!function(r){"use strict";function o(t,e){this.$element=r(t),this.options=r.extend({},o.DEFAULTS,e),this.isLoading=!1}function n(n){return this.each(function(){var t=r(this),e=t.data("bs.button");e||t.data("bs.button",e=new o(this,"object"==typeof n&&n)),"toggle"==n?e.toggle():n&&e.setState(n)})}o.VERSION="3.4.1",o.DEFAULTS={loadingText:"loading..."},o.prototype.setState=function(t){var e="disabled",n=this.$element,o=n.is("input")?"val":"html",i=n.data();t+="Text",null==i.resetText&&n.data("resetText",n[o]()),setTimeout(r.proxy(function(){n[o]((null==i[t]?this.options:i)[t]),"loadingText"==t?(this.isLoading=!0,n.addClass(e).attr(e,e).prop(e,!0)):this.isLoading&&(this.isLoading=!1,n.removeClass(e).removeAttr(e).prop(e,!1))},this),0)},o.prototype.toggle=function(){var t,e=!0,n=this.$element.closest('[data-toggle="buttons"]');n.length?("radio"==(t=this.$element.find("input")).prop("type")?(t.prop("checked")&&(e=!1),n.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==t.prop("type")&&(t.prop("checked")!==this.$element.hasClass("active")&&(e=!1),this.$element.toggleClass("active")),t.prop("checked",this.$element.hasClass("active")),e&&t.trigger("change")):(this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active"))};var t=r.fn.button;r.fn.button=n,r.fn.button.Constructor=o,r.fn.button.noConflict=function(){return r.fn.button=t,this},r(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var e=r(t.target).closest(".btn");n.call(e,"toggle"),r(t.target).is('input[type="radio"], input[type="checkbox"]')||(t.preventDefault(),(e.is("input,button")?e:e.find("input:visible,button:visible").first()).trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){r(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery)},{}],15:[function(t,e,n){!function(c){"use strict";function u(t,e){this.$element=c(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",c.proxy(this.keydown,this)),"hover"!=this.options.pause||"ontouchstart"in document.documentElement||this.$element.on("mouseenter.bs.carousel",c.proxy(this.pause,this)).on("mouseleave.bs.carousel",c.proxy(this.cycle,this))}function i(i){return this.each(function(){var t=c(this),e=t.data("bs.carousel"),n=c.extend({},u.DEFAULTS,t.data(),"object"==typeof i&&i),o="string"==typeof i?i:n.slide;e||t.data("bs.carousel",e=new u(this,n)),"number"==typeof i?e.to(i):o?e[o]():n.interval&&e.pause().cycle()})}u.VERSION="3.4.1",u.TRANSITION_DURATION=600,u.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},u.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},u.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(c.proxy(this.next,this),this.options.interval)),this},u.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},u.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);return("prev"==t&&0===n||"next"==t&&n==this.$items.length-1)&&!this.options.wrap?e:(e=(n+("prev"==t?-1:1))%this.$items.length,this.$items.eq(e))},u.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(n<t?"next":"prev",this.$items.eq(t))},u.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&c.support.transition&&(this.$element.trigger(c.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},u.prototype.next=function(){if(!this.sliding)return this.slide("next")},u.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},u.prototype.slide=function(t,e){var n,o,i,r=this.$element.find(".item.active"),s=e||this.getItemForDirection(t,r),e=this.interval,a="next"==t?"left":"right",l=this;return s.hasClass("active")?this.sliding=!1:(n=s[0],o=c.Event("slide.bs.carousel",{relatedTarget:n,direction:a}),this.$element.trigger(o),o.isDefaultPrevented()?void 0:(this.sliding=!0,e&&this.pause(),this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),o=c(this.$indicators.children()[this.getItemIndex(s)]))&&o.addClass("active"),i=c.Event("slid.bs.carousel",{relatedTarget:n,direction:a}),c.support.transition&&this.$element.hasClass("slide")?(s.addClass(t),"object"==typeof s&&s.length&&s[0].offsetWidth,r.addClass(a),s.addClass(a),r.one("bsTransitionEnd",function(){s.removeClass([t,a].join(" ")).addClass("active"),r.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(i)},0)}).emulateTransitionEnd(u.TRANSITION_DURATION)):(r.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(i)),e&&this.cycle(),this))};function t(t){var e,n=c(this),o=(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""),o=n.attr("data-target")||o;(o=c(document).find(o)).hasClass("carousel")&&(e=c.extend({},o.data(),n.data()),(n=n.attr("data-slide-to"))&&(e.interval=!1),i.call(o,e),n&&o.data("bs.carousel").to(n),t.preventDefault())}var e=c.fn.carousel;c.fn.carousel=i,c.fn.carousel.Constructor=u,c.fn.carousel.noConflict=function(){return c.fn.carousel=e,this};c(document).on("click.bs.carousel.data-api","[data-slide]",t).on("click.bs.carousel.data-api","[data-slide-to]",t),c(window).on("load",function(){c('[data-ride="carousel"]').each(function(){var t=c(this);i.call(t,t.data())})})}(jQuery)},{}],16:[function(t,e,n){!function(i){"use strict";function r(t,e){this.$element=i(t),this.options=i.extend({},r.DEFAULTS,e),this.$trigger=i('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()}function n(t){t=t.attr("data-target")||(t=t.attr("href"))&&t.replace(/.*(?=#[^\s]+$)/,"");return i(document).find(t)}function s(o){return this.each(function(){var t=i(this),e=t.data("bs.collapse"),n=i.extend({},r.DEFAULTS,t.data(),"object"==typeof o&&o);!e&&n.toggle&&/show|hide/.test(o)&&(n.toggle=!1),e||t.data("bs.collapse",e=new r(this,n)),"string"==typeof o&&e[o]()})}r.VERSION="3.4.1",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var t=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(t&&t.length&&(o=t.data("bs.collapse"))&&o.transitioning)){var e=i.Event("show.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){t&&t.length&&(s.call(t,"hide"),o||t.data("bs.collapse",null));var n=this.dimension(),e=(this.$element.removeClass("collapse").addClass("collapsing")[n](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1,function(){this.$element.removeClass("collapsing").addClass("collapse in")[n](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")});if(!i.support.transition)return e.call(this);var o=i.camelCase(["scroll",n].join("-"));this.$element.one("bsTransitionEnd",i.proxy(e,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[n](this.$element[0][o])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=i.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var t=this.dimension(),e=(this.$element[t](this.$element[t]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1,function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")});if(!i.support.transition)return e.call(this);this.$element[t](0).one("bsTransitionEnd",i.proxy(e,this)).emulateTransitionEnd(r.TRANSITION_DURATION)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return i(document).find(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(i.proxy(function(t,e){e=i(e);this.addAriaAndCollapsedClass(n(e),e)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var t=i.fn.collapse;i.fn.collapse=s,i.fn.collapse.Constructor=r,i.fn.collapse.noConflict=function(){return i.fn.collapse=t,this},i(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var e=i(this),t=(e.attr("data-target")||t.preventDefault(),n(e)),e=t.data("bs.collapse")?"toggle":e.data();s.call(t,e)})}(jQuery)},{}],17:[function(t,e,n){!function(i){"use strict";function o(t){i(t).on("click.bs.dropdown",this.toggle)}var r='[data-toggle="dropdown"]';function s(t){var e=t.attr("data-target"),e="#"!==(e=e||(e=t.attr("href"))&&/#[A-Za-z]/.test(e)&&e.replace(/.*(?=#[^\s]*$)/,""))?i(document).find(e):null;return e&&e.length?e:t.parent()}function a(o){o&&3===o.which||(i(".dropdown-backdrop").remove(),i(r).each(function(){var t=i(this),e=s(t),n={relatedTarget:this};!e.hasClass("open")||o&&"click"==o.type&&/input|textarea/i.test(o.target.tagName)&&i.contains(e[0],o.target)||(e.trigger(o=i.Event("hide.bs.dropdown",n)),o.isDefaultPrevented())||(t.attr("aria-expanded","false"),e.removeClass("open").trigger(i.Event("hidden.bs.dropdown",n)))}))}o.VERSION="3.4.1",o.prototype.toggle=function(t){var e=i(this);if(!e.is(".disabled, :disabled")){var n=s(e),o=n.hasClass("open");if(a(),!o){"ontouchstart"in document.documentElement&&!n.closest(".navbar-nav").length&&i(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(i(this)).on("click",a);o={relatedTarget:this};if(n.trigger(t=i.Event("show.bs.dropdown",o)),t.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),n.toggleClass("open").trigger(i.Event("shown.bs.dropdown",o))}return!1}},o.prototype.keydown=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)){var e=i(this);if(t.preventDefault(),t.stopPropagation(),!e.is(".disabled, :disabled")){var n=s(e),o=n.hasClass("open");if(!o&&27!=t.which||o&&27==t.which)return 27==t.which&&n.find(r).trigger("focus"),e.trigger("click");o=n.find(".dropdown-menu li:not(.disabled):visible a");o.length&&(e=o.index(t.target),38==t.which&&0<e&&e--,40==t.which&&e<o.length-1&&e++,o.eq(e=~e?e:0).trigger("focus"))}}};var t=i.fn.dropdown;i.fn.dropdown=function(n){return this.each(function(){var t=i(this),e=t.data("bs.dropdown");e||t.data("bs.dropdown",e=new o(this)),"string"==typeof n&&e[n].call(t)})},i.fn.dropdown.Constructor=o,i.fn.dropdown.noConflict=function(){return i.fn.dropdown=t,this},i(document).on("click.bs.dropdown.data-api",a).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",r,o.prototype.toggle).on("keydown.bs.dropdown.data-api",r,o.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",o.prototype.keydown)}(jQuery)},{}],18:[function(t,e,n){!function(r){"use strict";function s(t,e){this.options=e,this.$body=r(document.body),this.$element=r(t),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.fixedContent=".navbar-fixed-top, .navbar-fixed-bottom",this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,r.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))}function a(o,i){return this.each(function(){var t=r(this),e=t.data("bs.modal"),n=r.extend({},s.DEFAULTS,t.data(),"object"==typeof o&&o);e||t.data("bs.modal",e=new s(this,n)),"string"==typeof o?e[o](i):n.show&&e.show(i)})}s.VERSION="3.4.1",s.TRANSITION_DURATION=300,s.BACKDROP_TRANSITION_DURATION=150,s.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},s.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},s.prototype.show=function(n){var o=this,t=r.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(t),this.isShown||t.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',r.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(t){r(t.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var t=r.support.transition&&o.$element.hasClass("fade"),e=(o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),t&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus(),r.Event("shown.bs.modal",{relatedTarget:n}));t?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(e)}).emulateTransitionEnd(s.TRANSITION_DURATION):o.$element.trigger("focus").trigger(e)}))},s.prototype.hide=function(t){t&&t.preventDefault(),t=r.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),r(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),r.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",r.proxy(this.hideModal,this)).emulateTransitionEnd(s.TRANSITION_DURATION):this.hideModal())},s.prototype.enforceFocus=function(){r(document).off("focusin.bs.modal").on("focusin.bs.modal",r.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},s.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",r.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},s.prototype.resize=function(){this.isShown?r(window).on("resize.bs.modal",r.proxy(this.handleUpdate,this)):r(window).off("resize.bs.modal")},s.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},s.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},s.prototype.backdrop=function(t){var e,n=this,o=this.$element.hasClass("fade")?"fade":"";this.isShown&&this.options.backdrop?(e=r.support.transition&&o,this.$backdrop=r(document.createElement("div")).addClass("modal-backdrop "+o).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",r.proxy(function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),e&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),t&&(e?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):t())):!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),o=function(){n.removeBackdrop(),t&&t()},r.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(s.BACKDROP_TRANSITION_DURATION):o()):t&&t()},s.prototype.handleUpdate=function(){this.adjustDialog()},s.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},s.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},s.prototype.checkScrollbar=function(){var t,e=window.innerWidth;e||(e=(t=document.documentElement.getBoundingClientRect()).right-Math.abs(t.left)),this.bodyIsOverflowing=document.body.clientWidth<e,this.scrollbarWidth=this.measureScrollbar()},s.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10),i=(this.originalBodyPad=document.body.style.paddingRight||"",this.scrollbarWidth);this.bodyIsOverflowing&&(this.$body.css("padding-right",t+i),r(this.fixedContent).each(function(t,e){var n=e.style.paddingRight,o=r(e).css("padding-right");r(e).data("padding-right",n).css("padding-right",parseFloat(o)+i+"px")}))},s.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad),r(this.fixedContent).each(function(t,e){var n=r(e).data("padding-right");r(e).removeData("padding-right"),e.style.paddingRight=n||""})},s.prototype.measureScrollbar=function(){var t=document.createElement("div"),e=(t.className="modal-scrollbar-measure",this.$body.append(t),t.offsetWidth-t.clientWidth);return this.$body[0].removeChild(t),e};var t=r.fn.modal;r.fn.modal=a,r.fn.modal.Constructor=s,r.fn.modal.noConflict=function(){return r.fn.modal=t,this},r(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var e=r(this),n=e.attr("href"),o=e.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,""),i=r(document).find(o),o=i.data("bs.modal")?"toggle":r.extend({remote:!/#/.test(n)&&n},i.data(),e.data());e.is("a")&&t.preventDefault(),i.one("show.bs.modal",function(t){t.isDefaultPrevented()||i.one("hidden.bs.modal",function(){e.is(":visible")&&e.trigger("focus")})}),a.call(i,o,this)})}(jQuery)},{}],19:[function(t,e,n){!function(i){"use strict";function r(t,e){this.init("popover",t,e)}if(!i.fn.tooltip)throw new Error("Popover requires tooltip.js");r.VERSION="3.4.1",r.DEFAULTS=i.extend({},i.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),((r.prototype=i.extend({},i.fn.tooltip.Constructor.prototype)).constructor=r).prototype.getDefaults=function(){return r.DEFAULTS},r.prototype.setContent=function(){var t,e=this.tip(),n=this.getTitle(),o=this.getContent();this.options.html?(t=typeof o,this.options.sanitize&&(n=this.sanitizeHtml(n),"string"==t)&&(o=this.sanitizeHtml(o)),e.find(".popover-title").html(n),e.find(".popover-content").children().detach().end()["string"==t?"html":"append"](o)):(e.find(".popover-title").text(n),e.find(".popover-content").children().detach().end().text(o)),e.removeClass("fade top bottom left right in"),e.find(".popover-title").html()||e.find(".popover-title").hide()},r.prototype.hasContent=function(){return this.getTitle()||this.getContent()},r.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},r.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var t=i.fn.popover;i.fn.popover=function(o){return this.each(function(){var t=i(this),e=t.data("bs.popover"),n="object"==typeof o&&o;!e&&/destroy|hide/.test(o)||(e||t.data("bs.popover",e=new r(this,n)),"string"==typeof o&&e[o]())})},i.fn.popover.Constructor=r,i.fn.popover.noConflict=function(){return i.fn.popover=t,this}}(jQuery)},{}],20:[function(t,e,n){!function(i){"use strict";function o(t,e){this.$body=i(document.body),this.$scrollElement=i(t).is(document.body)?i(window):i(t),this.options=i.extend({},o.DEFAULTS,e),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",i.proxy(this.process,this)),this.refresh(),this.process()}function e(n){return this.each(function(){var t=i(this),e=t.data("bs.scrollspy");e||t.data("bs.scrollspy",e=new o(this,"object"==typeof n&&n)),"string"==typeof n&&e[n]()})}o.VERSION="3.4.1",o.DEFAULTS={offset:10},o.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},o.prototype.refresh=function(){var t=this,n="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),i.isWindow(this.$scrollElement[0])||(n="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var t=i(this),t=t.data("target")||t.attr("href"),e=/^#./.test(t)&&i(t);return e&&e.length&&e.is(":visible")?[[e[n]().top+o,t]]:null}).sort(function(t,e){return t[0]-e[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},o.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),o=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,r=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),o<=e)return s!=(t=r[r.length-1])&&this.activate(t);if(s&&e<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)s!=r[t]&&e>=i[t]&&(void 0===i[t+1]||e<i[t+1])&&this.activate(r[t])},o.prototype.activate=function(t){this.activeTarget=t,this.clear();t=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',t=i(t).parents("li").addClass("active");(t=t.parent(".dropdown-menu").length?t.closest("li.dropdown").addClass("active"):t).trigger("activate.bs.scrollspy")},o.prototype.clear=function(){i(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var t=i.fn.scrollspy;i.fn.scrollspy=e,i.fn.scrollspy.Constructor=o,i.fn.scrollspy.noConflict=function(){return i.fn.scrollspy=t,this},i(window).on("load.bs.scrollspy.data-api",function(){i('[data-spy="scroll"]').each(function(){var t=i(this);e.call(t,t.data())})})}(jQuery)},{}],21:[function(t,e,n){!function(s){"use strict";function a(t){this.element=s(t)}function e(n){return this.each(function(){var t=s(this),e=t.data("bs.tab");e||t.data("bs.tab",e=new a(this)),"string"==typeof n&&e[n]()})}a.VERSION="3.4.1",a.TRANSITION_DURATION=150,a.prototype.show=function(){var t,e,n,o=this.element,i=o.closest("ul:not(.dropdown-menu)"),r=(r=o.data("target"))||(r=o.attr("href"))&&r.replace(/.*(?=#[^\s]*$)/,"");o.parent("li").hasClass("active")||(t=i.find(".active:last a"),e=s.Event("hide.bs.tab",{relatedTarget:o[0]}),n=s.Event("show.bs.tab",{relatedTarget:t[0]}),t.trigger(e),o.trigger(n),n.isDefaultPrevented())||e.isDefaultPrevented()||(n=s(document).find(r),this.activate(o.closest("li"),i),this.activate(n,n.parent(),function(){t.trigger({type:"hidden.bs.tab",relatedTarget:o[0]}),o.trigger({type:"shown.bs.tab",relatedTarget:t[0]})}))},a.prototype.activate=function(t,e,n){var o=e.find("> .active"),i=n&&s.support.transition&&(o.length&&o.hasClass("fade")||!!e.find("> .fade").length);function r(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),t.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),i?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu").length&&t.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}o.length&&i?o.one("bsTransitionEnd",r).emulateTransitionEnd(a.TRANSITION_DURATION):r(),o.removeClass("in")};function t(t){t.preventDefault(),e.call(s(this),"show")}var n=s.fn.tab;s.fn.tab=e,s.fn.tab.Constructor=a,s.fn.tab.noConflict=function(){return s.fn.tab=n,this};s(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',t).on("click.bs.tab.data-api",'[data-toggle="pill"]',t)}(jQuery)},{}],22:[function(t,e,n){!function(h){"use strict";var o=["sanitize","whiteList","sanitizeFn"],p=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],t={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},g=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,m=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function i(t,e,n){if(0===t.length)return t;if(n&&"function"==typeof n)return n(t);if(!document.implementation||!document.implementation.createHTMLDocument)return t;for(var n=document.implementation.createHTMLDocument("sanitization"),o=(n.body.innerHTML=t,h.map(e,function(t,e){return e})),i=h(n.body).find("*"),r=0,s=i.length;r<s;r++){var a=i[r],l=a.nodeName.toLowerCase();if(-1===h.inArray(l,o))a.parentNode.removeChild(a);else for(var c=h.map(a.attributes,function(t){return t}),u=[].concat(e["*"]||[],e[l]||[]),d=0,f=c.length;d<f;d++)!function(t,e){var n=t.nodeName.toLowerCase();if(-1!==h.inArray(n,e))return-1===h.inArray(n,p)||Boolean(t.nodeValue.match(g)||t.nodeValue.match(m));for(var o=h(e).filter(function(t,e){return e instanceof RegExp}),i=0,r=o.length;i<r;i++)if(n.match(o[i]))return 1}(c[d],u)&&a.removeAttribute(c[d].nodeName)}return n.body.innerHTML}function l(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)}l.VERSION="3.4.1",l.TRANSITION_DURATION=150,l.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0},sanitize:!0,sanitizeFn:null,whiteList:t},l.prototype.init=function(t,e,n){if(this.enabled=!0,this.type=t,this.$element=h(e),this.options=this.getOptions(n),this.$viewport=this.options.viewport&&h(document).find(h.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var o=this.options.trigger.split(" "),i=o.length;i--;){var r,s=o[i];"click"==s?this.$element.on("click."+this.type,this.options.selector,h.proxy(this.toggle,this)):"manual"!=s&&(r="hover"==s?"mouseleave":"focusout",this.$element.on(("hover"==s?"mouseenter":"focusin")+"."+this.type,this.options.selector,h.proxy(this.enter,this)),this.$element.on(r+"."+this.type,this.options.selector,h.proxy(this.leave,this)))}this.options.selector?this._options=h.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},l.prototype.getDefaults=function(){return l.DEFAULTS},l.prototype.getOptions=function(t){var e,n=this.$element.data();for(e in n)n.hasOwnProperty(e)&&-1!==h.inArray(e,o)&&delete n[e];return(t=h.extend({},this.getDefaults(),n,t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t.sanitize&&(t.template=i(t.template,t.whiteList,t.sanitizeFn)),t},l.prototype.getDelegateOptions=function(){var n={},o=this.getDefaults();return this._options&&h.each(this._options,function(t,e){o[t]!=e&&(n[t]=e)}),n},l.prototype.enter=function(t){var e=t instanceof this.constructor?t:h(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),h(t.currentTarget).data("bs."+this.type,e)),t instanceof h.Event&&(e.inState["focusin"==t.type?"focus":"hover"]=!0),e.tip().hasClass("in")||"in"==e.hoverState)e.hoverState="in";else{if(clearTimeout(e.timeout),e.hoverState="in",!e.options.delay||!e.options.delay.show)return e.show();e.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show)}},l.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},l.prototype.leave=function(t){var e=t instanceof this.constructor?t:h(t.currentTarget).data("bs."+this.type);if(e||(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),h(t.currentTarget).data("bs."+this.type,e)),t instanceof h.Event&&(e.inState["focusout"==t.type?"focus":"hover"]=!1),!e.isInStateTrue()){if(clearTimeout(e.timeout),e.hoverState="out",!e.options.delay||!e.options.delay.hide)return e.hide();e.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide)}},l.prototype.show=function(){var e,t,n,o,i,r,s,a=h.Event("show.bs."+this.type);this.hasContent()&&this.enabled&&(this.$element.trigger(a),i=h.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]),!a.isDefaultPrevented())&&i&&(a=(e=this).tip(),i=this.getUID(this.type),this.setContent(),a.attr("id",i),this.$element.attr("aria-describedby",i),this.options.animation&&a.addClass("fade"),i="function"==typeof this.options.placement?this.options.placement.call(this,a[0],this.$element[0]):this.options.placement,(s=(t=/\s?auto?\s?/i).test(i))&&(i=i.replace(t,"")||"top"),a.detach().css({top:0,left:0,display:"block"}).addClass(i).data("bs."+this.type,this),this.options.container?a.appendTo(h(document).find(this.options.container)):a.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type),t=this.getPosition(),n=a[0].offsetWidth,o=a[0].offsetHeight,s&&(s=i,r=this.getPosition(this.$viewport),i="bottom"==i&&t.bottom+o>r.bottom?"top":"top"==i&&t.top-o<r.top?"bottom":"right"==i&&t.right+n>r.width?"left":"left"==i&&t.left-n<r.left?"right":i,a.removeClass(s).addClass(i)),r=this.getCalculatedOffset(i,t,n,o),this.applyPlacement(r,i),s=function(){var t=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==t&&e.leave(e)},h.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",s).emulateTransitionEnd(l.TRANSITION_DURATION):s())},l.prototype.applyPlacement=function(t,e){var n=this.tip(),o=n[0].offsetWidth,i=n[0].offsetHeight,r=parseInt(n.css("margin-top"),10),s=parseInt(n.css("margin-left"),10),r=(isNaN(r)&&(r=0),isNaN(s)&&(s=0),t.top+=r,t.left+=s,h.offset.setOffset(n[0],h.extend({using:function(t){n.css({top:Math.round(t.top),left:Math.round(t.left)})}},t),0),n.addClass("in"),n[0].offsetWidth),s=n[0].offsetHeight,a=("top"==e&&s!=i&&(t.top=t.top+i-s),this.getViewportAdjustedDelta(e,t,r,s)),e=(a.left?t.left+=a.left:t.top+=a.top,/top|bottom/.test(e)),o=e?2*a.left-o+r:2*a.top-i+s,r=e?"offsetWidth":"offsetHeight";n.offset(t),this.replaceArrow(o,n[0][r],e)},l.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},l.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();this.options.html?(this.options.sanitize&&(e=i(e,this.options.whiteList,this.options.sanitizeFn)),t.find(".tooltip-inner").html(e)):t.find(".tooltip-inner").text(e),t.removeClass("fade in top bottom left right")},l.prototype.hide=function(t){var e=this,n=h(this.$tip),o=h.Event("hide.bs."+this.type);function i(){"in"!=e.hoverState&&n.detach(),e.$element&&e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),t&&t()}if(this.$element.trigger(o),!o.isDefaultPrevented())return n.removeClass("in"),h.support.transition&&n.hasClass("fade")?n.one("bsTransitionEnd",i).emulateTransitionEnd(l.TRANSITION_DURATION):i(),this.hoverState=null,this},l.prototype.fixTitle=function(){var t=this.$element;!t.attr("title")&&"string"==typeof t.attr("data-original-title")||t.attr("data-original-title",t.attr("title")||"").attr("title","")},l.prototype.hasContent=function(){return this.getTitle()},l.prototype.getPosition=function(t){var e=(t=t||this.$element)[0],n="BODY"==e.tagName,o=e.getBoundingClientRect(),e=(null==o.width&&(o=h.extend({},o,{width:o.right-o.left,height:o.bottom-o.top})),window.SVGElement&&e instanceof window.SVGElement),e=n?{top:0,left:0}:e?null:t.offset(),t={scroll:n?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()},n=n?{width:h(window).width(),height:h(window).height()}:null;return h.extend({},o,t,n,e)},l.prototype.getCalculatedOffset=function(t,e,n,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-n}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},l.prototype.getViewportAdjustedDelta=function(t,e,n,o){var i,r,s={top:0,left:0};return this.$viewport&&(i=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport),/right|left/.test(t)?(t=e.top-i-r.scroll,o=e.top+i-r.scroll+o,t<r.top?s.top=r.top-t:o>r.top+r.height&&(s.top=r.top+r.height-o)):(t=e.left-i,o=e.left+i+n,t<r.left?s.left=r.left-t:o>r.right&&(s.left=r.left+r.width-o))),s},l.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},l.prototype.getUID=function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},l.prototype.tip=function(){if(this.$tip||(this.$tip=h(this.options.template),1==this.$tip.length))return this.$tip;throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!")},l.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},l.prototype.enable=function(){this.enabled=!0},l.prototype.disable=function(){this.enabled=!1},l.prototype.toggleEnabled=function(){this.enabled=!this.enabled},l.prototype.toggle=function(t){var e=this;t&&!(e=h(t.currentTarget).data("bs."+this.type))&&(e=new this.constructor(t.currentTarget,this.getDelegateOptions()),h(t.currentTarget).data("bs."+this.type,e)),t?(e.inState.click=!e.inState.click,e.isInStateTrue()?e.enter(e):e.leave(e)):e.tip().hasClass("in")?e.leave(e):e.enter(e)},l.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})},l.prototype.sanitizeHtml=function(t){return i(t,this.options.whiteList,this.options.sanitizeFn)};var e=h.fn.tooltip;h.fn.tooltip=function(o){return this.each(function(){var t=h(this),e=t.data("bs.tooltip"),n="object"==typeof o&&o;!e&&/destroy|hide/.test(o)||(e||t.data("bs.tooltip",e=new l(this,n)),"string"==typeof o&&e[o]())})},h.fn.tooltip.Constructor=l,h.fn.tooltip.noConflict=function(){return h.fn.tooltip=e,this}}(jQuery)},{}],23:[function(t,e,n){!function(o){"use strict";o.fn.emulateTransitionEnd=function(t){var e=!1,n=this;o(this).one("bsTransitionEnd",function(){e=!0});return setTimeout(function(){e||o(n).trigger(o.support.transition.end)},t),this},o(function(){o.support.transition=function(){var t,e=document.createElement("bootstrap"),n={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in n)if(void 0!==e.style[t])return{end:n[t]};return!1}(),o.support.transition&&(o.event.special.bsTransitionEnd={bindType:o.support.transition.end,delegateType:o.support.transition.end,handle:function(t){if(o(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery)},{}],24:[function(t,e,n){var o=t("./lib/Modernizr"),i=t("./lib/ModernizrProto"),r=t("./lib/classes"),s=t("./lib/testRunner"),t=t("./lib/setClasses");s(),t(r),delete i.addTest,delete i.addAsyncTest;for(var a=0;a<o._q.length;a++)o._q[a]();e.exports=o},{"./lib/Modernizr":25,"./lib/ModernizrProto":26,"./lib/classes":27,"./lib/setClasses":45,"./lib/testRunner":50}],25:[function(t,e,n){var t=t("./ModernizrProto.js"),o=function(){};o.prototype=t,o=new o,e.exports=o},{"./ModernizrProto.js":26}],26:[function(t,e,n){var o=t("./tests.js");e.exports={_version:"3.6.0 (browsernizr 2.3.0)",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(t,e){var n=this;setTimeout(function(){e(n[t])},0)},addTest:function(t,e,n){o.push({name:t,fn:e,options:n})},addAsyncTest:function(t){o.push({name:null,fn:t})}}},{"./tests.js":51}],27:[function(t,e,n){e.exports=[]},{}],28:[function(t,e,n){e.exports=function(t,e,n){var o,i;return"getComputedStyle"in window?(o=getComputedStyle.call(window,t,e),i=window.console,null!==o?n&&(o=o.getPropertyValue(n)):i&&i[i.error?"error":"log"].call(i,"getComputedStyle returning null, its possible modernizr test results are inaccurate")):o=!e&&t.currentStyle&&t.currentStyle[n],o}},{}],29:[function(t,e,n){e.exports=function(t,e){return!!~(""+t).indexOf(e)}},{}],30:[function(t,e,n){var o=t("./isSVG.js");e.exports=function(){return"function"!=typeof document.createElement?document.createElement(arguments[0]):o?document.createElementNS.call(document,"http://www.w3.org/2000/svg",arguments[0]):document.createElement.apply(document,arguments)}},{"./isSVG.js":40}],31:[function(t,e,n){e.exports=function(t){return t.replace(/([a-z])-([a-z])/g,function(t,e,n){return e+n.toUpperCase()}).replace(/^-/,"")}},{}],32:[function(t,e,n){var o=t("./ModernizrProto.js"),t=t("./omPrefixes.js"),t=o._config.usePrefixes?t.split(" "):[];o._cssomPrefixes=t,e.exports=t},{"./ModernizrProto.js":26,"./omPrefixes.js":44}],33:[function(t,e,n){var o=document.documentElement;e.exports=o},{}],34:[function(t,e,n){var o=t("./ModernizrProto.js"),t=t("./omPrefixes.js"),t=o._config.usePrefixes?t.toLowerCase().split(" "):[];o._domPrefixes=t,e.exports=t},{"./ModernizrProto.js":26,"./omPrefixes.js":44}],35:[function(t,e,n){e.exports=function(t){return t.replace(/([A-Z])/g,function(t,e){return"-"+e.toLowerCase()}).replace(/^ms-/,"-ms-")}},{}],36:[function(t,e,n){e.exports=function(t,e){return function(){return t.apply(e,arguments)}}},{}],37:[function(t,e,n){var o=t("./createElement.js"),i=t("./isSVG.js");e.exports=function(){var t=document.body;return t||((t=o(i?"svg":"body")).fake=!0),t}},{"./createElement.js":30,"./isSVG.js":40}],38:[function(t,e,n){t("./ModernizrProto.js");var u=t("./docElement.js"),d=t("./createElement.js"),f=t("./getBody.js");e.exports=function(t,e,n,o){var i,r,s,a="modernizr",l=d("div"),c=f();if(parseInt(n,10))for(;n--;)(r=d("div")).id=o?o[n]:a+(n+1),l.appendChild(r);return(i=d("style")).type="text/css",i.id="s"+a,(c.fake?c:l).appendChild(i),c.appendChild(l),i.styleSheet?i.styleSheet.cssText=t:i.appendChild(document.createTextNode(t)),l.id=a,c.fake&&(c.style.background="",c.style.overflow="hidden",s=u.style.overflow,u.style.overflow="hidden",u.appendChild(c)),i=e(l,t),c.fake?(c.parentNode.removeChild(c),u.style.overflow=s,u.offsetHeight):l.parentNode.removeChild(l),!!i}},{"./ModernizrProto.js":26,"./createElement.js":30,"./docElement.js":33,"./getBody.js":37}],39:[function(t,e,n){e.exports=function(t,e){return typeof t===e}},{}],40:[function(t,e,n){t="svg"===t("./docElement.js").nodeName.toLowerCase();e.exports=t},{"./docElement.js":33}],41:[function(t,e,n){var o=t("./Modernizr.js"),i={style:t("./modElem.js").elem.style};o._q.unshift(function(){delete i.style}),e.exports=i},{"./Modernizr.js":25,"./modElem.js":42}],42:[function(t,e,n){var o=t("./Modernizr.js"),i={elem:t("./createElement.js")("modernizr")};o._q.push(function(){delete i.elem}),e.exports=i},{"./Modernizr.js":25,"./createElement.js":30}],43:[function(t,e,n){var i=t("./injectElementWithStyles.js"),r=t("./domToCSS.js"),s=t("./computedStyle.js");e.exports=function(t,e){var n=t.length;if("CSS"in window&&"supports"in window.CSS){for(;n--;)if(window.CSS.supports(r(t[n]),e))return!0;return!1}if("CSSSupportsRule"in window){for(var o=[];n--;)o.push("("+r(t[n])+":"+e+")");return o=o.join(" or "),i("@supports ("+o+") { #modernizr { position: absolute; } }",function(t){return"absolute"===s(t,null,"position")})}}},{"./computedStyle.js":28,"./domToCSS.js":35,"./injectElementWithStyles.js":38}],44:[function(t,e,n){e.exports="Moz O ms Webkit"},{}],45:[function(t,e,n){var i=t("./Modernizr.js"),r=t("./docElement.js"),s=t("./isSVG.js");e.exports=function(t){var e,n=r.className,o=i._config.classPrefix||"";s&&(n=n.baseVal),i._config.enableJSClass&&(e=new RegExp("(^|\\s)"+o+"no-js(\\s|$)"),n=n.replace(e,"$1"+o+"js$2")),i._config.enableClasses&&(0<t.length&&(n+=" "+o+t.join(" "+o)),s?r.className.baseVal=n:r.className=n)}},{"./Modernizr.js":25,"./docElement.js":33,"./isSVG.js":40}],46:[function(t,e,n){var o=t("./ModernizrProto.js"),i=t("./testPropsAll.js");function r(t,e,n){return i(t,void 0,void 0,e,n)}o.testAllProps=r,e.exports=r},{"./ModernizrProto.js":26,"./testPropsAll.js":49}],47:[function(t,e,n){var r=t("./is.js"),s=t("./fnBind.js");e.exports=function(t,e,n){var o,i;for(i in t)if(t[i]in e)return!1===n?t[i]:(o=e[t[i]],r(o,"function")?s(o,n||e):o);return!1}},{"./fnBind.js":36,"./is.js":39}],48:[function(t,e,n){var f=t("./contains.js"),h=t("./mStyle.js"),p=t("./createElement.js"),g=t("./nativeTestProps.js"),m=t("./is.js"),v=t("./cssToDOM.js");e.exports=function(t,e,n,o){if(o=!m(o,"undefined")&&o,!m(n,"undefined")){var i=g(t,n);if(!m(i,"undefined"))return i}for(var r,s,a,l,c,u=["modernizr","tspan","samp"];!h.style&&u.length;)r=!0,h.modElem=p(u.shift()),h.style=h.modElem.style;function d(){r&&(delete h.style,delete h.modElem)}for(a=t.length,s=0;s<a;s++)if(l=t[s],c=h.style[l],f(l,"-")&&(l=v(l)),void 0!==h.style[l]){if(o||m(n,"undefined"))return d(),"pfx"!==e||l;try{h.style[l]=n}catch(t){}if(h.style[l]!==c)return d(),"pfx"!==e||l}return d(),!1}},{"./contains.js":29,"./createElement.js":30,"./cssToDOM.js":31,"./is.js":39,"./mStyle.js":41,"./nativeTestProps.js":43}],49:[function(t,e,n){var o=t("./ModernizrProto.js"),a=t("./cssomPrefixes.js"),l=t("./is.js"),c=t("./testProps.js"),u=t("./domPrefixes.js"),d=t("./testDOMProps.js");function i(t,e,n,o,i){var r=t.charAt(0).toUpperCase()+t.slice(1),s=(t+" "+a.join(r+" ")+r).split(" ");return l(e,"string")||l(e,"undefined")?c(s,e,o,i):(s=(t+" "+u.join(r+" ")+r).split(" "),d(s,e,n))}o.testAllProps=i,e.exports=i},{"./ModernizrProto.js":26,"./cssomPrefixes.js":32,"./domPrefixes.js":34,"./is.js":39,"./testDOMProps.js":47,"./testProps.js":48}],50:[function(t,e,n){var a=t("./tests.js"),l=t("./Modernizr.js"),c=t("./classes.js"),u=t("./is.js");e.exports=function(){var t,e,n,o,i,r,s;for(s in a)if(a.hasOwnProperty(s)){if(t=[],(e=a[s]).name&&(t.push(e.name.toLowerCase()),e.options)&&e.options.aliases&&e.options.aliases.length)for(n=0;n<e.options.aliases.length;n++)t.push(e.options.aliases[n].toLowerCase());for(o=u(e.fn,"function")?e.fn():e.fn,i=0;i<t.length;i++)1===(r=t[i].split(".")).length?l[r[0]]=o:(!l[r[0]]||l[r[0]]instanceof Boolean||(l[r[0]]=new Boolean(l[r[0]])),l[r[0]][r[1]]=o),c.push((o?"":"no-")+r.join("-"))}}},{"./Modernizr.js":25,"./classes.js":27,"./is.js":39,"./tests.js":51}],51:[function(t,e,n){e.exports=[]},{}],52:[function(t,e,n){var o=t("./../../lib/Modernizr.js"),t=t("./../../lib/testAllProps.js");o.addTest("cssanimations",t("animationName","a",!0))},{"./../../lib/Modernizr.js":25,"./../../lib/testAllProps.js":46}],53:[function(t,e,n){t("./../../lib/Modernizr.js").addTest("localstorage",function(){var t="modernizr";try{return localStorage.setItem(t,t),localStorage.removeItem(t),!0}catch(t){return!1}})},{"./../../lib/Modernizr.js":25}],54:[function(t,e,n){t("./../lib/Modernizr.js").addTest("webgl",function(){return"WebGLRenderingContext"in window})},{"./../lib/Modernizr.js":25}],55:[function(t,e,n){function o(t,e){function i(t,e){d=function(t){for(var e=new Array(t),n=0;n<t;n+=1){e[n]=new Array(t);for(var o=0;o<t;o+=1)e[n][o]=null}return e}(f=4*a+17),l(0,0),l(f-7,0),l(0,f-7),u(),c(),p(t,e),7<=a&&h(t),null==n&&(n=m(a,r,o)),g(n,e)}var a=t,r=v[e],d=null,f=0,n=null,o=new Array,s={},l=function(t,e){for(var n=-1;n<=7;n+=1)if(!(t+n<=-1||f<=t+n))for(var o=-1;o<=7;o+=1)e+o<=-1||f<=e+o||(d[t+n][e+o]=0<=n&&n<=6&&(0==o||6==o)||0<=o&&o<=6&&(0==n||6==n)||2<=n&&n<=4&&2<=o&&o<=4)},c=function(){for(var t=8;t<f-8;t+=1)null==d[t][6]&&(d[t][6]=t%2==0);for(var e=8;e<f-8;e+=1)null==d[6][e]&&(d[6][e]=e%2==0)},u=function(){for(var t=T.getPatternPosition(a),e=0;e<t.length;e+=1)for(var n=0;n<t.length;n+=1){var o=t[e],i=t[n];if(null==d[o][i])for(var r=-2;r<=2;r+=1)for(var s=-2;s<=2;s+=1)d[o+r][i+s]=-2==r||2==r||-2==s||2==s||0==r&&0==s}},h=function(t){for(var e=T.getBCHTypeNumber(a),n=0;n<18;n+=1){var o=!t&&1==(e>>n&1);d[Math.floor(n/3)][n%3+f-8-3]=o}for(n=0;n<18;n+=1){o=!t&&1==(e>>n&1);d[n%3+f-8-3][Math.floor(n/3)]=o}},p=function(t,e){for(var n=T.getBCHTypeInfo(r<<3|e),o=0;o<15;o+=1){var i=!t&&1==(n>>o&1);o<6?d[o][8]=i:o<8?d[o+1][8]=i:d[f-15+o][8]=i}for(o=0;o<15;o+=1){i=!t&&1==(n>>o&1);o<8?d[8][f-o-1]=i:o<9?d[8][15-o-1+1]=i:d[8][15-o-1]=i}d[f-8][8]=!t},g=function(t,e){for(var n=-1,o=f-1,i=7,r=0,s=T.getMaskFunction(e),a=f-1;0<a;a-=2)for(6==a&&--a;;){for(var l,c,u=0;u<2;u+=1)null==d[o][a-u]&&(l=!1,r<t.length&&(l=1==(t[r]>>>i&1)),c=s(o,a-u),d[o][a-u]=l=c?!l:l,-1==--i)&&(r+=1,i=7);if((o+=n)<0||f<=o){o-=n,n=-n;break}}},m=function(t,e,n){for(var o=k.getRSBlocks(t,e),i=j(),r=0;r<n.length;r+=1){var s=n[r];i.put(s.getMode(),4),i.put(s.getLength(),T.getLengthInBits(s.getMode(),t)),s.write(i)}for(var a=0,r=0;r<o.length;r+=1)a+=o[r].dataCount;if(i.getLengthInBits()>8*a)throw new Error("code length overflow. ("+i.getLengthInBits()+">"+8*a+")");for(i.getLengthInBits()+4<=8*a&&i.put(0,4);i.getLengthInBits()%8!=0;)i.putBit(!1);for(;;){if(i.getLengthInBits()>=8*a)break;if(i.put(236,8),i.getLengthInBits()>=8*a)break;i.put(17,8)}for(var l=i,c=o,u=0,d=0,f=0,h=new Array(c.length),p=new Array(c.length),g=0;g<c.length;g+=1){var m=c[g].dataCount,v=c[g].totalCount-m,d=Math.max(d,m),f=Math.max(f,v);h[g]=new Array(m);for(var b=0;b<h[g].length;b+=1)h[g][b]=255&l.getBuffer()[b+u];u+=m;var m=T.getErrorCorrectPolynomial(v),y=x(h[g],m.getLength()-1).mod(m);p[g]=new Array(m.getLength()-1);for(b=0;b<p[g].length;b+=1){var w=b+y.getLength()-p[g].length;p[g][b]=0<=w?y.get(w):0}}for(var $=0,b=0;b<c.length;b+=1)$+=c[b].totalCount;for(var S=new Array($),C=0,b=0;b<d;b+=1)for(g=0;g<c.length;g+=1)b<h[g].length&&(S[C]=h[g][b],C+=1);for(b=0;b<f;b+=1)for(g=0;g<c.length;g+=1)b<p[g].length&&(S[C]=p[g][b],C+=1);return S};return s.addData=function(t){t=C(t);o.push(t),n=null},s.isDark=function(t,e){if(t<0||f<=t||e<0||f<=e)throw new Error(t+","+e);return d[t][e]},s.getModuleCount=function(){return f},s.make=function(){i(!1,function(){for(var t=0,e=0,n=0;n<8;n+=1){i(!0,n);var o=T.getLostPoint(s);(0==n||o<t)&&(t=o,e=n)}return e}())},s.createTableTag=function(t,e){t=t||2;for(var n=(n=(n=(n="")+'<table style="'+" border-width: 0px; border-style: none;")+" border-collapse: collapse;"+(" padding: 0px; margin: "+(e=void 0===e?4*t:e)+"px;"))+'">'+"<tbody>",o=0;o<s.getModuleCount();o+=1){n+="<tr>";for(var i=0;i<s.getModuleCount();i+=1)n=(n=(n=(n+='<td style=" border-width: 0px; border-style: none; border-collapse: collapse;')+" padding: 0px; margin: 0px; width: "+t+"px;")+" height: "+t+"px; background-color: ")+(s.isDark(o,i)?"#000000":"#ffffff")+';"/>';n+="</tr>"}return n=n+"</tbody>"+"</table>"},s.createImgTag=function(n,t){n=n||2,t=void 0===t?4*n:t;var e=s.getModuleCount()*n+2*t,o=t,i=e-t;return I(e,e,function(t,e){return o<=t&&t<i&&o<=e&&e<i&&(t=Math.floor((t-o)/n),e=Math.floor((e-o)/n),s.isDark(e,t))?0:1})},s}function i(t){for(var e=0;0!=t;)e+=1,t>>>=1;return e}function x(o,i){if(void 0===o.length)throw new Error(o.length+"/"+i);var e=function(){for(var t=0;t<o.length&&0==o[t];)t+=1;for(var e=new Array(o.length-t+i),n=0;n<o.length-t;n+=1)e[n]=o[n+t];return e}(),r={get:function(t){return e[t]},getLength:function(){return e.length},multiply:function(t){for(var e=new Array(r.getLength()+t.getLength()-1),n=0;n<r.getLength();n+=1)for(var o=0;o<t.getLength();o+=1)e[n+o]^=$.gexp($.glog(r.get(n))+$.glog(t.get(o)));return x(e,0)},mod:function(t){if(r.getLength()-t.getLength()<0)return r;for(var e=$.glog(r.get(0))-$.glog(t.get(0)),n=new Array(r.getLength()),o=0;o<r.getLength();o+=1)n[o]=r.get(o);for(o=0;o<t.getLength();o+=1)n[o]^=$.gexp($.glog(t.get(o))+e);return x(n,0).mod(t)}};return r}function d(){function n(t){s+=String.fromCharCode(function(t){if(t<0);else if(t<26)return 65+t;else if(t<52)return 97+(t-26);else if(t<62)return 48+(t-52);else if(t==62)return 43;else if(t==63)return 47;throw new Error("n:"+t)}(63&t))}var o=0,i=0,r=0,s="",t={writeByte:function(t){for(o=o<<8|255&t,i+=8,r+=1;6<=i;)n(o>>>i-6),i-=6},flush:function(){if(0<i&&(n(o<<6-i),i=o=0),r%3!=0)for(var t=3-r%3,e=0;e<t;e+=1)s+="="},toString:function(){return s}};return t}function f(t,e){var o=t,i=e,h=new Array(t*e),r=function(t){for(var e=1<<t,n=1+(1<<t),o=t+1,i=p(),r=0;r<e;r+=1)i.add(String.fromCharCode(r));i.add(String.fromCharCode(e)),i.add(String.fromCharCode(n));var s,a,l,t=E(),c=(s=t,l=a=0,{write:function(t,e){if(t>>>e!=0)throw new Error("length over");for(;8<=a+e;)s.writeByte(255&(t<<a|l)),e-=8-a,t>>>=8-a,a=l=0;l|=t<<a,a+=e},flush:function(){0<a&&s.writeByte(l)}}),u=(c.write(e,o),0),d=String.fromCharCode(h[u]);for(u+=1;u<h.length;){var f=String.fromCharCode(h[u]);u+=1,i.contains(d+f)?d+=f:(c.write(i.indexOf(d),o),i.size()<4095&&(i.size()==1<<o&&(o+=1),i.add(d+f)),d=f)}return c.write(i.indexOf(d),o),c.write(n,o),c.flush(),t.toByteArray()},p=function(){var e={},n=0,o={add:function(t){if(o.contains(t))throw new Error("dup key:"+t);e[t]=n,n+=1},size:function(){return n},indexOf:function(t){return e[t]},contains:function(t){return void 0!==e[t]}};return o};return t={setPixel:function(t,e,n){h[e*o+t]=n},write:function(t){t.writeString("GIF87a"),t.writeShort(o),t.writeShort(i),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(","),t.writeShort(0),t.writeShort(0),t.writeShort(o),t.writeShort(i),t.writeByte(0);for(var e=r(2),n=(t.writeByte(2),0);255<e.length-n;)t.writeByte(255),t.writeBytes(e,n,255),n+=255;t.writeByte(e.length-n),t.writeBytes(e,n,e.length-n),t.writeByte(0),t.writeString(";")}}}var r,s,a,l,c,v,u,h,p,g,m,b,y,w,T,$,S,k,j,C,E,D,I;n.qrcode=(o.stringToBytes=function(t){for(var e=new Array,n=0;n<t.length;n+=1){var o=t.charCodeAt(n);e.push(255&o)}return e},o.createStringToBytes=function(l,c){var i=function(){function t(){var t=e.read();if(-1==t)throw new Error;return t}for(var e=D(l),n=0,o={};;){var i=e.read();if(-1==i)break;var r=t(),s=t(),a=t();o[String.fromCharCode(i<<8|r)]=s<<8|a,n+=1}if(n!=c)throw new Error(n+" != "+c);return o}(),r="?".charCodeAt(0);return function(t){for(var e=new Array,n=0;n<t.length;n+=1){var o=t.charCodeAt(n);o<128?e.push(o):"number"==typeof(o=i[t.charAt(n)])?(255&o)==o?e.push(o):(e.push(o>>>8),e.push(255&o)):e.push(r)}return e}},c=8,v={L:s=1,M:0,Q:3,H:a=2},u=0,h=1,p=2,g=3,m=l=4,b=5,w=7,r=[[],[y=6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],(n={}).getBCHTypeInfo=function(t){for(var e=t<<10;0<=i(e)-i(1335);)e^=1335<<i(e)-i(1335);return 21522^(t<<10|e)},n.getBCHTypeNumber=function(t){for(var e=t<<12;0<=i(e)-i(7973);)e^=7973<<i(e)-i(7973);return t<<12|e},n.getPatternPosition=function(t){return r[t-1]},n.getMaskFunction=function(t){switch(t){case u:return function(t,e){return(t+e)%2==0};case h:return function(t,e){return t%2==0};case p:return function(t,e){return e%3==0};case g:return function(t,e){return(t+e)%3==0};case m:return function(t,e){return(Math.floor(t/2)+Math.floor(e/3))%2==0};case b:return function(t,e){return t*e%2+t*e%3==0};case y:return function(t,e){return(t*e%2+t*e%3)%2==0};case w:return function(t,e){return(t*e%3+(t+e)%2)%2==0};default:throw new Error("bad maskPattern:"+t)}},n.getErrorCorrectPolynomial=function(t){for(var e=x([1],0),n=0;n<t;n+=1)e=e.multiply(x([1,$.gexp(n)],0));return e},n.getLengthInBits=function(t,e){if(1<=e&&e<10)switch(t){case s:return 10;case a:return 9;case l:case c:return 8;default:throw new Error("mode:"+t)}else if(e<27)switch(t){case s:return 12;case a:return 11;case l:return 16;case c:return 10;default:throw new Error("mode:"+t)}else{if(!(e<41))throw new Error("type:"+e);switch(t){case s:return 14;case a:return 13;case l:return 16;case c:return 12;default:throw new Error("mode:"+t)}}},n.getLostPoint=function(t){for(var e=t.getModuleCount(),n=0,o=0;o<e;o+=1)for(var i=0;i<e;i+=1){for(var r=0,s=t.isDark(o,i),a=-1;a<=1;a+=1)if(!(o+a<0||e<=o+a))for(var l=-1;l<=1;l+=1)i+l<0||e<=i+l||0==a&&0==l||s==t.isDark(o+a,i+l)&&(r+=1);5<r&&(n+=3+r-5)}for(o=0;o<e-1;o+=1)for(i=0;i<e-1;i+=1){var c=0;t.isDark(o,i)&&(c+=1),t.isDark(o+1,i)&&(c+=1),t.isDark(o,i+1)&&(c+=1),t.isDark(o+1,i+1)&&(c+=1),0!=c&&4!=c||(n+=3)}for(o=0;o<e;o+=1)for(i=0;i<e-6;i+=1)t.isDark(o,i)&&!t.isDark(o,i+1)&&t.isDark(o,i+2)&&t.isDark(o,i+3)&&t.isDark(o,i+4)&&!t.isDark(o,i+5)&&t.isDark(o,i+6)&&(n+=40);for(i=0;i<e;i+=1)for(o=0;o<e-6;o+=1)t.isDark(o,i)&&!t.isDark(o+1,i)&&t.isDark(o+2,i)&&t.isDark(o+3,i)&&t.isDark(o+4,i)&&!t.isDark(o+5,i)&&t.isDark(o+6,i)&&(n+=40);for(var u=0,i=0;i<e;i+=1)for(o=0;o<e;o+=1)t.isDark(o,i)&&(u+=1);return n+=10*(Math.abs(100*u/e/e-50)/5)},T=n,$=function(){for(var e=new Array(256),n=new Array(256),t=0;t<8;t+=1)e[t]=1<<t;for(t=8;t<256;t+=1)e[t]=e[t-4]^e[t-5]^e[t-6]^e[t-8];for(t=0;t<255;t+=1)n[e[t]]=t;var o={glog:function(t){if(t<1)throw new Error("glog("+t+")");return n[t]},gexp:function(t){for(;t<0;)t+=255;for(;256<=t;)t-=255;return e[t]}};return o}(),S=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16]],(n={}).getRSBlocks=function(t,e){var n=function(t,e){switch(e){case v.L:return S[4*(t-1)+0];case v.M:return S[4*(t-1)+1];case v.Q:return S[4*(t-1)+2];case v.H:return S[4*(t-1)+3];default:return}}(t,e);if(void 0===n)throw new Error("bad rs block @ typeNumber:"+t+"/errorCorrectLevel:"+e);for(var o,i,r=n.length/3,s=new Array,a=0;a<r;a+=1)for(var l=n[3*a+0],c=n[3*a+1],u=n[3*a+2],d=0;d<l;d+=1)s.push((o=u,void 0,(i={}).totalCount=c,i.dataCount=o,i));return s},k=n,j=function(){var n=new Array,o=0,i={getBuffer:function(){return n},get:function(t){var e=Math.floor(t/8);return 1==(n[e]>>>7-t%8&1)},put:function(t,e){for(var n=0;n<e;n+=1)i.putBit(1==(t>>>e-n-1&1))},getLengthInBits:function(){return o},putBit:function(t){var e=Math.floor(o/8);n.length<=e&&n.push(0),t&&(n[e]|=128>>>o%8),o+=1}};return i},C=function(t){var e=l,n=o.stringToBytes(t),t={getMode:function(){return e},getLength:function(t){return n.length},write:function(t){for(var e=0;e<n.length;e+=1)t.put(n[e],8)}};return t},E=function(){var n=new Array,i={writeByte:function(t){n.push(255&t)},writeShort:function(t){i.writeByte(t),i.writeByte(t>>>8)},writeBytes:function(t,e,n){e=e||0,n=n||t.length;for(var o=0;o<n;o+=1)i.writeByte(t[o+e])},writeString:function(t){for(var e=0;e<t.length;e+=1)i.writeByte(t.charCodeAt(e))},toByteArray:function(){return n},toString:function(){var t="";t+="[";for(var e=0;e<n.length;e+=1)0<e&&(t+=","),t+=n[e];return t+="]"}};return i},D=function(t){var n=t,o=0,i=0,r=0,t={read:function(){for(;r<8;){if(o>=n.length){if(0==r)return-1;throw new Error("unexpected end of file./"+r)}var t=n.charAt(o);if(o+=1,"="==t)return r=0,-1;t.match(/^\s$/)||(i=i<<6|s(t.charCodeAt(0)),r+=6)}var e=i>>>r-8&255;return r-=8,e}},s=function(t){if(65<=t&&t<=90)return t-65;if(97<=t&&t<=122)return t-97+26;if(48<=t&&t<=57)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw new Error("c:"+t)};return t},I=function(t,e,n,o){for(var i=f(t,e),r=0;r<e;r+=1)for(var s=0;s<t;s+=1)i.setPixel(s,r,n(s,r));for(var a=E(),l=(i.write(a),d()),c=a.toByteArray(),u=0;u<c.length;u+=1)l.writeByte(c[u]);l.flush();a="",a=(a=(a=(a+='<img src="data:image/gif;base64,')+l+'"')+' width="'+t+'" height="')+e+'"';return o&&(a=(a+=' alt="')+o+'"'),a+="/>"},o)},{}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
